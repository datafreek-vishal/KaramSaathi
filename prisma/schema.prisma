// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  phoneVerified DateTime?
  image         String?
  role          String    @default("WORKER") // WORKER, EMPLOYER, ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Worker-specific fields
  age           Int?
  gender        String?   // MALE, FEMALE, OTHER
  categoryId    String?
  city          String?
  pincode       String?
  experience    String?
  
  // Employer-specific fields
  companyName   String?
  companySize   String?
  
  accounts      Account[]
  sessions      Session[]
  category      Category? @relation(fields: [categoryId], references: [id])
  jobPosts      JobPost[]
  applications  Application[]
}

model Category {
  id       String    @id @default(cuid())
  nameEn   String
  nameHi   String
  icon     String    // emoji or custom URL
  sector   String    // Construction, Household, Factory, etc.
  
  users    User[]
  jobs     JobPost[]
  
  @@index([sector])
}

model JobPost {
  id           String    @id @default(cuid())
  title        String
  description  String
  requirements String?
  salary       String?
  jobType      String    @default("DAILY_WAGE") // FULL_TIME, PART_TIME, CONTRACT, DAILY_WAGE
  status       String    @default("PENDING_APPROVAL") // ACTIVE, PAUSED, CLOSED, PENDING_APPROVAL
  city         String
  pincode      String?
  address      String?
  contactPhone String
  contactEmail String?
  
  employerId   String
  categoryId   String
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime?
  
  employer     User      @relation(fields: [employerId], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [categoryId], references: [id])
  applications Application[]
  
  @@index([categoryId, city, status])
  @@index([employerId])
}

model Application {
  id        String    @id @default(cuid())
  message   String?
  status    String    @default("PENDING") // PENDING, VIEWED, SHORTLISTED, REJECTED, HIRED
  
  workerId  String
  jobPostId String
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  worker    User      @relation(fields: [workerId], references: [id], onDelete: Cascade)
  jobPost   JobPost   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  
  @@unique([workerId, jobPostId])
  @@index([jobPostId, status])
  @@index([workerId])
}
